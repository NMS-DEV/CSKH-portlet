/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.docs.customercare.model.impl;

import com.liferay.docs.customercare.model.AgentDataEntry;
import com.liferay.docs.customercare.model.AgentDataEntryModel;
import com.liferay.docs.customercare.model.AgentDataEntrySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AgentDataEntry service. Represents a row in the &quot;CC_AgentDataEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.docs.customercare.model.AgentDataEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AgentDataEntryImpl}.
 * </p>
 *
 * @author DuyMB
 * @see AgentDataEntryImpl
 * @see com.liferay.docs.customercare.model.AgentDataEntry
 * @see com.liferay.docs.customercare.model.AgentDataEntryModel
 * @generated
 */
@JSON(strict = true)
public class AgentDataEntryModelImpl extends BaseModelImpl<AgentDataEntry>
	implements AgentDataEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a agent data entry model instance should use the {@link com.liferay.docs.customercare.model.AgentDataEntry} interface instead.
	 */
	public static final String TABLE_NAME = "CC_AgentDataEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "agentDataEntryId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "agentId", Types.BIGINT },
			{ "queueList", Types.VARCHAR },
			{ "extension", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table CC_AgentDataEntry (agentDataEntryId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,agentId LONG,queueList VARCHAR(75) null,extension VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table CC_AgentDataEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY agentDataEntry.agentDataEntryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CC_AgentDataEntry.agentDataEntryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.docs.customercare.model.AgentDataEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.docs.customercare.model.AgentDataEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AgentDataEntry toModel(AgentDataEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AgentDataEntry model = new AgentDataEntryImpl();

		model.setAgentDataEntryId(soapModel.getAgentDataEntryId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setAgentId(soapModel.getAgentId());
		model.setQueueList(soapModel.getQueueList());
		model.setExtension(soapModel.getExtension());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AgentDataEntry> toModels(AgentDataEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AgentDataEntry> models = new ArrayList<AgentDataEntry>(soapModels.length);

		for (AgentDataEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.docs.customercare.model.AgentDataEntry"));

	public AgentDataEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _agentDataEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAgentDataEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _agentDataEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AgentDataEntry.class;
	}

	@Override
	public String getModelClassName() {
		return AgentDataEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("agentDataEntryId", getAgentDataEntryId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("agentId", getAgentId());
		attributes.put("queueList", getQueueList());
		attributes.put("extension", getExtension());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long agentDataEntryId = (Long)attributes.get("agentDataEntryId");

		if (agentDataEntryId != null) {
			setAgentDataEntryId(agentDataEntryId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long agentId = (Long)attributes.get("agentId");

		if (agentId != null) {
			setAgentId(agentId);
		}

		String queueList = (String)attributes.get("queueList");

		if (queueList != null) {
			setQueueList(queueList);
		}

		String extension = (String)attributes.get("extension");

		if (extension != null) {
			setExtension(extension);
		}
	}

	@JSON
	@Override
	public long getAgentDataEntryId() {
		return _agentDataEntryId;
	}

	@Override
	public void setAgentDataEntryId(long agentDataEntryId) {
		_agentDataEntryId = agentDataEntryId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getAgentId() {
		return _agentId;
	}

	@Override
	public void setAgentId(long agentId) {
		_agentId = agentId;
	}

	@JSON
	@Override
	public String getQueueList() {
		if (_queueList == null) {
			return StringPool.BLANK;
		}
		else {
			return _queueList;
		}
	}

	@Override
	public void setQueueList(String queueList) {
		_queueList = queueList;
	}

	@JSON
	@Override
	public String getExtension() {
		if (_extension == null) {
			return StringPool.BLANK;
		}
		else {
			return _extension;
		}
	}

	@Override
	public void setExtension(String extension) {
		_extension = extension;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			AgentDataEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AgentDataEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AgentDataEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AgentDataEntryImpl agentDataEntryImpl = new AgentDataEntryImpl();

		agentDataEntryImpl.setAgentDataEntryId(getAgentDataEntryId());
		agentDataEntryImpl.setGroupId(getGroupId());
		agentDataEntryImpl.setCompanyId(getCompanyId());
		agentDataEntryImpl.setUserId(getUserId());
		agentDataEntryImpl.setUserName(getUserName());
		agentDataEntryImpl.setCreateDate(getCreateDate());
		agentDataEntryImpl.setModifiedDate(getModifiedDate());
		agentDataEntryImpl.setAgentId(getAgentId());
		agentDataEntryImpl.setQueueList(getQueueList());
		agentDataEntryImpl.setExtension(getExtension());

		agentDataEntryImpl.resetOriginalValues();

		return agentDataEntryImpl;
	}

	@Override
	public int compareTo(AgentDataEntry agentDataEntry) {
		long primaryKey = agentDataEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AgentDataEntry)) {
			return false;
		}

		AgentDataEntry agentDataEntry = (AgentDataEntry)obj;

		long primaryKey = agentDataEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<AgentDataEntry> toCacheModel() {
		AgentDataEntryCacheModel agentDataEntryCacheModel = new AgentDataEntryCacheModel();

		agentDataEntryCacheModel.agentDataEntryId = getAgentDataEntryId();

		agentDataEntryCacheModel.groupId = getGroupId();

		agentDataEntryCacheModel.companyId = getCompanyId();

		agentDataEntryCacheModel.userId = getUserId();

		agentDataEntryCacheModel.userName = getUserName();

		String userName = agentDataEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			agentDataEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			agentDataEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			agentDataEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			agentDataEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			agentDataEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		agentDataEntryCacheModel.agentId = getAgentId();

		agentDataEntryCacheModel.queueList = getQueueList();

		String queueList = agentDataEntryCacheModel.queueList;

		if ((queueList != null) && (queueList.length() == 0)) {
			agentDataEntryCacheModel.queueList = null;
		}

		agentDataEntryCacheModel.extension = getExtension();

		String extension = agentDataEntryCacheModel.extension;

		if ((extension != null) && (extension.length() == 0)) {
			agentDataEntryCacheModel.extension = null;
		}

		return agentDataEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{agentDataEntryId=");
		sb.append(getAgentDataEntryId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", agentId=");
		sb.append(getAgentId());
		sb.append(", queueList=");
		sb.append(getQueueList());
		sb.append(", extension=");
		sb.append(getExtension());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.liferay.docs.customercare.model.AgentDataEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>agentDataEntryId</column-name><column-value><![CDATA[");
		sb.append(getAgentDataEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>agentId</column-name><column-value><![CDATA[");
		sb.append(getAgentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>queueList</column-name><column-value><![CDATA[");
		sb.append(getQueueList());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>extension</column-name><column-value><![CDATA[");
		sb.append(getExtension());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AgentDataEntry.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			AgentDataEntry.class
		};
	private long _agentDataEntryId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _agentId;
	private String _queueList;
	private String _extension;
	private AgentDataEntry _escapedModel;
}